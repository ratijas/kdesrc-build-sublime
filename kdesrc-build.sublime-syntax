%YAML 1.2
---
version: 2
name: kdesrc-build
scope: source.kdesrc-build

file_extensions:
  - kdesrc-buildrc
  # keep them in sync with settings and with upstream repo
  - custom-qt5-libs-build-include
  - custom-qt6-libs-build-include
  - kdesrc-buildrc-kf5-sample
  - kdesrc-buildrc-kf6-sample
  - kf5-applications-build-include
  - kf5-common-options-build-include
  - kf5-extragear-build-include
  - kf5-frameworks-build-include
  - kf5-kdepim-build-include
  - kf5-qt5-build-include
  - kf5-workspace-build-include
  - kf6-applications-build-include
  - kf6-common-options-build-include
  - kf6-extragear-build-include
  - kf6-frameworks-build-include
  - kf6-kdepim-build-include
  - kf6-qt6-build-include
  - kf6-workspace-build-include
  - qt5-build-include
  - qt6-build-include

extends: Packages/ShellScript/Bash.sublime-syntax

variables:
  # based on Packages/JavaScript/JavaScript.sublime-syntax
  identifier_part: (?:[-_\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}])
  identifier_break: (?!{{identifier_part}})
  identifier: (?:{{identifier_part}}+{{identifier_break}})

  cmake_identifier: (?:[a-zA-Z][a-zA-Z0-9_]*)

  # Copied from Markdown.sublime-syntax
  html_entity: '&([a-zA-Z0-9]+|#\d+|#[Xx]\h+);'

  string_option: |-
    (?x:
      binpath|branch|build-dir|checkout-only|cmake-options|configure-flags
    | custom-build-command|cxxflags|dest-dir|do-not-compile|kdedir
    | libpath|log-dir|make-install-prefix|make-options|module-base-path
    | cmake-generator|cmake-toolchain|ninja-options
    | override-build-system|override-url|prefix|qtdir|repository
    | revision|source-dir|svn-server|tag|remove-after-install
    | qmake-options|git-user|directory-layout
    ){{identifier_break}}

  global_string_option: |-
    (?x:
      branch-group|git-desired-protocol|git-repository-base|http-proxy
    | kde-languages|niceness|debug-level|persistent-data-file|set-env
    | num-cores|num-cores-low-mem
    # extra options not found in upstream vim syntax at the time of writing
    | directory-structure
    ){{identifier_break}}

  module_set_option: (?:use-modules|ignore-modules){{identifier_break}}

  bool_option: |-
    (?x:
      build-system-only|build-when-unchanged|ignore-kde-structure
    | include-dependencies|install-after-build|manual-build|manual-update
    | no-src|reconfigure|recreate-configure|refresh-build|run-tests
    | use-clean-install|compile-commands-export|compile-commands-linking
    ){{identifier_break}}

  global_bool_option: |-
    (?x:
      async|colorful-output|disable-agent-check|disable-snapshots|pretend
    | purge-old-logs|stop-on-failure|use-idle-io-priority|install-session-driver
    | install-environment-driver
    )

contexts:
  main:
    - include: statements

  prototype:
    - include: comments

  comments:
    - include: line-comments

  eol-or-error:
    - match: \n|$
      pop: 1
    - match: \S+
      scope: invalid.illegal.kdesrc-build

  line-comments:
    - match: \#
      scope: punctuation.definition.comment.kdesrc-build
      push: line-comment-body

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.number-sign.kdesrc-build
    - include: line-comment-end

  line-comment-end:
    - match: (\#+)?\n
      captures:
        1: punctuation.definition.comment.kdesrc-build
      pop: 1

  statements:
    - match: (?=\S)
      push: statement

  statement:
    - include: include
    - include: global-region
    - include: module-set-region
    - include: module-region
    - include: options-region

  include:
    - match: include{{identifier_break}}
      scope: keyword.import.kdesrc-build
      set:
        - path
        - skip-1-space

  path:
    - meta_scope: meta.expect.path.kdesrc-build

    - match: \s*$\n?
      pop: 1

    - match: \S[^\n]*
      scope: string.unquoted.kdesrc-build
      pop: 1

  # GLOBAL

  global-string-option:
    - match: '{{global_string_option}}'
      scope: support.function.kdesrc-build
      set: string-value

  error-global-string-option:
    - match: '{{global_string_option}}'
      scope: invalid.illegal.global-option.kdesrc-build
      set: string-value

  global-bool-option:
    - match: '{{global_bool_option}}'
      scope: support.function.kdesrc-build
      set: bool-value

  error-global-bool-option:
    - match: '{{global_bool_option}}'
      scope: invalid.illegal.global-option.kdesrc-build
      set: bool-value

  # MODULE-SET

  module-set-option:
    - match: '{{module_set_option}}'
      scope: support.function.kdesrc-build
      set: string-value

  error-module-set-option:
    - match: '{{module_set_option}}'
      scope: invalid.illegal.module-set-option.kdesrc-build
      set: string-value

  # these two are allowed at any region / level

  string-option:
    - match: '{{string_option}}'
      scope: support.function.kdesrc-build
      set: string-value

  bool-option:
    - match: '{{bool_option}}'
      scope: support.function.kdesrc-build
      set: bool-value

  # END REGIONS

  unknown-option:
    - match: '{{identifier}}'
      scope: entity.name.function.kdesrc-build
      set: string-value

  bool-value:
    - match: ''
      set:
        - bool-value-meta
        - bool-value-content

  bool-value-meta:
    - meta_include_prototype: false
    - meta_scope: meta.expected.bool.kdesrc-build
    - match: ''
      pop: 1

  bool-value-content:
    - meta_include_prototype: false
    - match: (?:true|1){{identifier_break}}
      scope: constant.language.boolean.true.kdesrc-build
    - match: (?:false|0){{identifier_break}}
      scope: constant.language.boolean.false.kdesrc-build
    - match: (?:t(?:r(?:u)?)?|f(?:a(?:l(?:s)?)?)?){{identifier_break}}
      # incremental typing, don't highlight as an error
    - match: (\S+)$\n?
      captures:
        1: invalid.illegal.expected-boolean.kdesrc-build
      pop: 1
    - match: $\n?
      pop: 1
    - match: \s*(?=\#)
      comment: keep meta.expected-boolean but drop before the comment
      pop: 1

  string-value:
    - meta_include_prototype: false
    - match: ''
      set:
        - string-expected-value
        - skip-1-space

  skip-1-space:
    - meta_include_prototype: false
    - match: ' '
      pop: 1
    - match: ''
      pop: 2

  string-expected-value:
    - meta_include_prototype: false
    - match: ''
      set:
        - string-meta-expected
        - string-value-content
        - skip-preceeding-space

  string-meta-expected:
    - meta_include_prototype: false
    - meta_scope: meta.expected.string.kdesrc-build
    - match: ''
      pop: 1

  skip-preceeding-space:
    - meta_include_prototype: false
    - match: '[ \t]*'
      pop: 1

  string-value-content:
    - meta_include_prototype: false
    - match: (?=\S)
      set:
        - meta_include_prototype: false
        - meta_content_scope: string.unquoted.kdesrc-build
        - match: (\\)$\n?
          captures:
            1: punctuation.separator.continuation.kdesrc-build
        - match: \n
          pop: 1
        - match: \s*(?=\#)
          comment: keep meta.expected-string but discard string.unquoted
          pop: 1
        - include: string-numeric-value
        - include: string-cmake-option
        - include: string-link-value
        - include: expansions-and-strings
    - match: $\n?
      pop: 1

  string-numeric-value:
    - meta_include_prototype: false
    # up to 4 parts in version numbers
    - match: \b\d+(?:(\.)\d+)?(?:(\.)\d+)?(?:(\.)\d+)?(?!{{identifier_part}})
      scope: constant.numeric.value.kdesrc-build
      captures:
        1: punctuation.separator.decimal.kdesrc-build
        2: punctuation.separator.decimal.kdesrc-build
        3: punctuation.separator.decimal.kdesrc-build

  string-cmake-option:
    - meta_include_prototype: false
    - match: (-D)({{cmake_identifier}})(=?)
      captures:
        1: storage.modifier.cmake.kdesrc-build
        2: entity.name.constant.kdesrc-build
        3: keyword.operator.assignment.kdesrc-build
      push: string-cmake-option-value

  string-cmake-option-value:
    - meta_include_prototype: false
    - match: (?:1|ON|YES|TRUE|Y){{identifier_break}}
      scope: constant.language.boolean.true.kdesrc-build
      pop: 1
    - match: (?:0|OFF|NO|FALSE|N|IGNORE|NOTFOUND){{identifier_break}}
      scope: constant.language.boolean.false.kdesrc-build
      pop: 1
    - match: ''
      pop: 1

  string-link-value:
    - include: autolink-inet

# BEGIN Markdown links

  # Copied from Markdown.sublime-syntax.

  autolink-inet:
    # GitHub Flavoured Markdown
    # After a valid domain, zero or more non-space non-< characters may follow
    - match: (?:(?:https|http|ftp|file)(://)|www\.)[\w-]+
      captures:
        1: punctuation.separator.path.markdown
      push: autolink-inet-unquoted-content

  autolink-inet-unquoted-content:
    - meta_include_prototype: false
    - meta_scope: meta.link.inet.markdown markup.underline.link.markdown-gfm
    - match: (?=(?:\)|(?:{{html_entity}})*)[?!.,:*_~]*[\s<])
      pop: 1
    - include: autolink-inet-common

  autolink-inet-common:
    - include: link-url-path-separators
    - include: link-url-escapes

  link-url-escapes:
    - match: (%)\h{2}
      scope: constant.character.escape.url.markdown
      captures:
        1: punctuation.definition.escape.markdown

  link-url-path-separators:
    - match: '[/&?#]'
      scope: punctuation.separator.path.markdown

# END Markdown links

# BEGIN Regions

  global-region:
    - match: ^\s*(global){{identifier_break}}
      captures:
        1: keyword.other.region.kdesrc-build
      push:
        - global-region-body
        - eol-or-error

  global-region-body:
    - meta_scope: meta.block.global.kdesrc-build
    - match: ^\s*end\s+global{{identifier_break}}
      scope: keyword.other.region.kdesrc-build
      set: eol-or-error
    - include: end-unbalanced
    - match: (?=\S)
      push: global-statements

  global-statements:
    - include: string-option
    - include: global-string-option
    - include: global-bool-option
    - include: bool-option
    - include: error-module-set-option
    - include: unknown-option

  module-set-region:
    - match: ^\s*(module-set){{identifier_break}}(?:[ \t]+({{identifier}}))?
      captures:
        1: keyword.other.region.kdesrc-build
        2: entity.name.constant.kdesrc-build
      push:
        - module-set-region-body
        - eol-or-error

  module-set-region-body:
    - meta_scope: meta.block.module-set.kdesrc-build
    - match: ^\s*end\s+module-set{{identifier_break}}
      scope: keyword.other.region.kdesrc-build
      set: eol-or-error
    - include: end-unbalanced
    - match: (?=\S)
      push: module-set-statements

  module-set-statements:
    - include: string-option
    - include: module-set-option
    - include: bool-option
    - include: error-global-bool-option
    - include: error-global-string-option
    - include: unknown-option

  module-region:
    - match: ^\s*(module){{identifier_break}}(?:[ \t]+({{identifier}}))?
      captures:
        1: keyword.other.region.kdesrc-build
        2: entity.name.constant.kdesrc-build
      push:
        - module-region-body
        - eol-or-error

  module-region-body:
    - meta_scope: meta.block.module.kdesrc-build
    - match: ^\s*end\s+module{{identifier_break}}
      scope: keyword.other.region.kdesrc-build
      set: eol-or-error
    - include: end-unbalanced
    - match: (?=\S)
      push: module-statements

  module-statements:
    - include: string-option
    - include: bool-option
    - include: error-module-set-option
    - include: error-global-bool-option
    - include: error-global-string-option
    - include: unknown-option

  options-region:
    - match: ^\s*(options){{identifier_break}}(?:[ \t]+({{identifier}}))?
      captures:
        1: keyword.other.region.kdesrc-build
        2: variable.other.constant.kdesrc-build
      push:
        - options-region-body
        - eol-or-error

  options-region-body:
    - meta_scope: meta.block.options.kdesrc-build
    - match: ^\s*end\s+options{{identifier_break}}
      scope: keyword.other.region.kdesrc-build
      set: eol-or-error
    - include: end-unbalanced
    - match: (?=\S)
      push: module-or-module-set-statements

  module-or-module-set-statements:
    - include: string-option
    - include: bool-option
    - include: error-global-bool-option
    - include: error-global-string-option
    - include: unknown-option

  end-unbalanced:
    - match: end\s+(?:global|module|module-set|options){{identifier_break}}
      scope: invalid.illegal.stray-end.kdesrc-build
      set: eol-or-error
    - match: end{{identifier_break}}
      scope: keyword.other.region.kdesrc-build
      set:
        - meta_scope: meta.expected-region.kdesrc-build
        - match: \n|$
          pop: 1

# END Regions
